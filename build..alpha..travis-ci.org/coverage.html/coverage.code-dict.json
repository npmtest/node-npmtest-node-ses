{"/home/travis/build/npmtest/node-npmtest-node-ses/test.js":"/* istanbul instrument in package npmtest_node_ses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ses/lib.npmtest_node_ses.js":"/* istanbul instrument in package npmtest_node_ses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_ses = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_ses = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ses/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-ses && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_ses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_ses\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_ses.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_ses.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_ses.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_ses.__dirname + '/lib.npmtest_node_ses.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ses/node_modules/node-ses/index.js":"module.exports = exports = require('./lib/ses');\n","/home/travis/build/npmtest/node-npmtest-node-ses/node_modules/node-ses/lib/ses.js":"// node-ses\n'use strict';\n\nvar email = require('./email')\n  , DEFAULT_API_HOST = 'https://email.us-east-1.amazonaws.com';\n\n\n/**\n * Options helper.\n * @private\n */\nfunction expect (options, key) {\n  if (options && options[key]) {\n    return options[key];\n  }\n\n  throw new Error(key + ' is required');\n}\n\n/**\n * SESClient\n *\n * `options` is an object with these properties:\n *\n *    key - your AWS SES key\n *    secret - your AWS SES secret\n *    amazon - [optional] the amazon end-point uri. defaults to amazon `https://email.us-east-1.amazonaws.com`\n *\n * Example:\n *\n *     var client = new SESClient({ key: 'key', secret: 'secret' });\n *     client.sendemail({\n *        to: 'aaron.heckmann+github@gmail.com'\n *      , from: 'somewhereOverTheR@inbow.com'\n *      , cc: 'theWickedWitch@nerds.net'\n *      , bcc: ['canAlsoBe@nArray.com', 'forrealz@.org']\n *      , subject: 'greetings'\n *      , message: 'your message goes here'\n *      , altText: 'mmm hmm'\n *    }, function (err) {\n *      // ...\n *    });\n *\n * @param {Object} options\n */\nfunction SESClient (options) {\n  this.key = expect(options, 'key');\n  this.secret = expect(options, 'secret');\n  this.amazon = options.amazon || exports.amazon;\n}\n\n\n/**\n * Send an email\n *\n * @param {Object} options\n * @param {Function} callback\n */\nSESClient.prototype.sendEmail = function (options, callback) {\n  options.key = options.key || this.key;\n  options.secret = options.secret || this.secret;\n  options.amazon = options.amazon || this.amazon;\n  options.action = email.actions.SendEmail;\n\n  var message = new email.Email(options);\n  message.send(callback);\n};\n\n/**\n * Send an email (convenience alias to sendemail)\n *\n * @param {Object} options\n * @param {Function} callback\n **/\nSESClient.prototype.sendemail = SESClient.prototype.sendEmail;\n\n/**\n * Send an email (raw)\n *\n * @param {Object} options\n * @param {Function} callback\n */\nSESClient.prototype.sendRawEmail = function (options, callback) {\n  options.key = options.key || this.key;\n  options.secret = options.secret || this.secret;\n  options.amazon = options.amazon || this.amazon;\n  options.action = email.actions.SendRawEmail;\n\n  var message = new email.Email(options);\n  message.send(callback);\n};\n\n/**\n * Exports\n **/\nexports.createClient = function createClient (options) {\n  return new SESClient(options);\n};\n\nexports.Email = email.Email;\nexports.amazon = DEFAULT_API_HOST;\nexports.version = require('../package.json').version;\n","/home/travis/build/npmtest/node-npmtest-node-ses/node_modules/node-ses/lib/email.js":"'use strict';\n\nvar aws4 = require('aws4')\n  , debug = require('debug')('node-ses')\n  , parse = require('url').parse\n  , querystring = require('querystring')\n  , request = require('request')\n  , xml2js = require('xml2js')\n  , xmlParser = new xml2js.Parser({explicitArray:false,mergeAttrs:true})\n\n  , SEND_EMAIL_ACTION = 'SendEmail'\n  , SEND_RAW_EMAIL_ACTION = 'SendRawEmail';\n\n\n\n\n/**\n * Email constructor.\n *\n * @param {Object} options\n **/\nfunction Email (options) {\n  this.action = options.action || SEND_EMAIL_ACTION;\n  this.key = options.key;\n  this.secret = options.secret;\n  this.amazon = options.amazon;\n  this.from = options.from;\n  this.subject = options.subject;\n  this.message = options.message;\n  this.altText = options.altText;\n  this.rawMessage = options.rawMessage;\n  this.extractRecipient(options, 'to');\n  this.extractRecipient(options, 'cc');\n  this.extractRecipient(options, 'bcc');\n  this.extractRecipient(options, 'replyTo');\n}\n\n\n/**\n * Adds to, cc, and bcc fields to `data`.\n *\n * @param {Object} data\n * @return data\n **/\nEmail.prototype.addDestination = function (data) {\n  this.to.forEach(function (to, i) {\n    data['Destination.ToAddresses.member.' + (i + 1)] = to;\n  });\n\n  this.cc.forEach(function (to, i) {\n    data['Destination.CcAddresses.member.' + (i + 1)] = to;\n  });\n\n  this.bcc.forEach(function (to, i) {\n    data['Destination.BccAddresses.member.' + (i + 1)] = to;\n  });\n\n  return data;\n};\n\n\n/**\n * Adds subject, alt text, and message body to `data`.\n *\n * @param {Object} data\n * @return data\n **/\nEmail.prototype.addMessage = function (data) {\n  if (this.subject) {\n    data['Message.Subject.Data'] = this.subject;\n    data['Message.Subject.Charset'] = 'UTF-8';\n  }\n\n  if (this.message) {\n    data['Message.Body.Html.Data'] = this.message;\n    data['Message.Body.Html.Charset'] = 'UTF-8';\n  }\n\n  if (this.altText) {\n    data['Message.Body.Text.Data'] = this.altText;\n    data['Message.Body.Text.Charset'] = 'UTF-8';\n  }\n\n  return data;\n};\n\n\n/**\n * Adds the list of ReplyTos to `data`.\n *\n * @param {Object} data\n * @return data\n **/\nEmail.prototype.addReplyTo = function (data) {\n  this.replyTo.forEach(function(to, i) {\n    data['ReplyToAddresses.member.' + (i + 1)] = to;\n  });\n\n  return data;\n};\n\n\n/**\n * Prepares param object for the AWS request.\n *\n * @return {Object}\n */\nEmail.prototype.data = function () {\n  var data = {\n      Action: this.action\n    , AWSAccessKeyId: this.key\n    , Source: this.from\n  };\n\n  // recipients and reply tos\n  data = this.addDestination(data);\n  data = this.addReplyTo(data);\n\n  // message payload\n  if (this.action === SEND_EMAIL_ACTION) {\n    data = this.addMessage(data);\n  } else if (this.action === SEND_RAW_EMAIL_ACTION) {\n    data['RawMessage.Data'] = new Buffer(this.rawMessage).toString('base64');\n  }\n\n  return data;\n};\n\n\n/**\n * Extracts recipients from options.\n *\n * @param {String} prop - either to,cc,bcc,replyTo\n * @param {Object} options\n */\nEmail.prototype.extractRecipient = function (options, prop) {\n  if (options[prop]) {\n    this[prop] = Array.isArray(options[prop]) ? options[prop] : [options[prop]];\n  } else {\n    this[prop] = [];\n  }\n};\n\n\n/**\n * Creates required AWS headers.\n *\n * No additional custom headers by default.\n * \n * @return Object\n **/\nEmail.prototype.headers = function () {\n  var headers = {};\n  return headers;\n};\n\n\n/**\n * Sends the email.\n *\n * @param {Function} callback\n * @api Public\n **/\nEmail.prototype.send = function send (callback) {\n\tvar self = this;\n\n  var invalid = self.validate();\n\n  if (invalid) {\n    return callback(new Error(invalid));\n  }\n\n\t// Prepare the data and send to it AWS SES REST API\n\n  var data = querystring.stringify(self.data());\n  var parsedUrl = parse(self.amazon);\n  var headers = self.headers();\n\n  headers['Connection'] = 'Keep-Alive';\n\n  var options = {\n      uri: self.amazon\n    , host: parsedUrl.hostname\n    , headers: headers\n    , body: data\n    , service: 'ses'\n  };\n\n\tvar signedOpts = aws4.sign(options, {\n    accessKeyId : self.key,\n    secretAccessKey : self.secret\n\t});\n\n  debug('posting: %j', signedOpts);\n\n  request(signedOpts, function (err, res, data) {\n \t\t\tself._processResponse(err, res, data, callback)\n\t});\n\n};\n\n/**\n * Process a response from the 'request' call used to POST email to SES\n * @private\n *\n */\nEmail.prototype._processResponse = function _processResponse (err, res, data, callback) {\n  debug('received: %s %d %j', err, res && res.statusCode || 0, data);\n\n  if (err) {\n    return callback({\n      Type : \"NodeSesInternal\",\n      Code : \"RequestError\",\n      Message: err,\n    }, data, res);\n  }\n\n  if (res.statusCode < 200 || res.statusCode >= 400) {\n    return xmlParser.parseString(data,function(err,result){\n        if(err) {\n          return callback({\n            Type: \"NodeSesInternal\",\n            Code: \"ParseError\",\n            Message: err\n          });\n        }\n\n        // Return an error object with keys of Type, Code and Message\n        // Reference docs at: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/query-interface-responses.html\n        if(result && result.ErrorResponse){\n          return callback(result.ErrorResponse.Error)\n        }\n        // Once during an S3 outage AWS returned valid XML that didn't match the usual error structure.\n        // We cover this unlikely case\n        else {\n          return callback({\n            Type : \"NodeSesInternal\",\n            Code : \"XmlError\",\n            Message: result,\n          })\n        }\n\n    });\n  }\n  return callback(null, data, res);\n};\n\n\n\n\n/**\n * Validates the input.\n *\n * @returns {String|Undefined}\n **/\nEmail.prototype.validate = function () {\n  if (this.action === SEND_EMAIL_ACTION) {\n    if (!this.to.length && !this.cc.length && !this.bcc.length) {\n      return 'To, Cc or Bcc is required';\n    }\n\n    if (!(this.subject && this.subject.length)) {\n      return 'Subject is required';\n    }\n  }\n\n  if (this.action === SEND_RAW_EMAIL_ACTION) {\n    if (!(this.rawMessage && this.rawMessage.length)) {\n      return 'Raw message is required';\n    }\n  }\n\n  // all actions require the following\n  if (!(this.from && this.from.length)) {\n    return 'From is required';\n  }\n};\n\n/**\n * Exports\n **/\nexports.Email = Email;\n\nexports.actions = {\n  SendEmail : SEND_EMAIL_ACTION,\n  SendRawEmail : SEND_RAW_EMAIL_ACTION\n};\n"}